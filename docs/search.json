[
  {
    "objectID": "notebooks/001_Emisiones_GruposEconómicos.html",
    "href": "notebooks/001_Emisiones_GruposEconómicos.html",
    "title": "carga y manipulaci’on de datos",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as px\nimport seaborn as sns\n\n\nf = '../data/annual-co2-emissions-per-country.csv'\nco2_percountry = pd.read_csv(f)\nentities = co2_percountry.Entity.unique()\ngrupos = [entity for entity in entities if 'income' in entity]\n\nco2_income = co2_percountry[co2_percountry.Entity.isin(grupos)].copy()\n\ntraduccion = {\n    'High-income countries': 'Ingresos altos',\n    'Low-income countries': 'Ingresos bajos',\n    'Lower-middle-income countries': 'Ingresos medios-bajos',\n    'Upper-middle-income countries': 'Ingresos medios-altos'\n}\nco2_income['Entity'] = co2_income['Entity'].replace(traduccion)\nco2_income['Tton CO₂'] = co2_income['Annual CO₂ emissions']/1e9\n\n\nco2_percountry\n\n\n\n\n\n\n\n\nEntity\nCode\nYear\nAnnual CO₂ emissions\nemission_range\n\n\n\n\n0\nAfghanistan\nAFG\n1949\n14656.0\n(0.0, 69616.0]\n\n\n1\nAfghanistan\nAFG\n1950\n84272.0\n(69616.0, 395712.0]\n\n\n2\nAfghanistan\nAFG\n1951\n91600.0\n(69616.0, 395712.0]\n\n\n3\nAfghanistan\nAFG\n1952\n91600.0\n(69616.0, 395712.0]\n\n\n4\nAfghanistan\nAFG\n1953\n106256.0\n(69616.0, 395712.0]\n\n\n...\n...\n...\n...\n...\n...\n\n\n30303\nZimbabwe\nZWE\n2018\n10714598.0\n(10216358.0, 28731988.8]\n\n\n30304\nZimbabwe\nZWE\n2019\n9775428.0\n(3856092.0, 10216358.0]\n\n\n30305\nZimbabwe\nZWE\n2020\n7849639.0\n(3856092.0, 10216358.0]\n\n\n30306\nZimbabwe\nZWE\n2021\n8396158.0\n(3856092.0, 10216358.0]\n\n\n30307\nZimbabwe\nZWE\n2022\n8855981.0\n(3856092.0, 10216358.0]\n\n\n\n\n30308 rows × 5 columns\n\n\n\n\nmask_year = co2_income.Year == co2_income.Year.max()\nmask_income = co2_income.Entity == 'Ingresos altos'\nco2 = co2_income[mask_year & mask_income ][['Tton CO₂']].values[0][0]\nco2.round(1)\n\nnp.float64(12.6)\n\n\n\nCO2 por nivel de ingreso de país\n\nfig = px.area(\n    co2_income, \n    x='Year', \n    y='Tton CO₂', \n    color='Entity', \n    labels={\n        'Year': 'Año', \n        'Entity': ''\n    },\n    # title='Emisiones anuales de CO₂ por grupo de ingresos (1750-2021)'\n)\n\nfig.update_layout(legend=dict(\n    yanchor=\"top\",\n    y=0.99,\n    xanchor=\"left\",\n    x=0.01\n))\n\nfig.show()\n\n                                                \n\n\n\npaises = co2_percountry.Code.unique()\npaises = [pais for pais in paises if  not pd.isna(pais) if len(pais)==3]\nmask_paises = (co2_percountry.Code.isin(paises))\nmask_year = (co2_percountry.Year == co2_percountry.Year.max())\nco2_percountry[mask_paises &  mask_year ].sort_values(by='Annual CO₂ emissions',ascending=False)['Entity']\n\n6256                 China\n28896        United States\n13330                India\n23158               Russia\n14415                Japan\n               ...        \n29768    Wallis and Futuna\n18329           Montserrat\n23295         Saint Helena\n28092               Tuvalu\n19489                 Niue\nName: Entity, Length: 213, dtype: object\n\n\n\n\nEmisiones por país\n\nco2_percountry\n\n\n\n\n\n\n\n\nEntity\nCode\nYear\nAnnual CO₂ emissions\n\n\n\n\n0\nAfghanistan\nAFG\n1949\n14656.0\n\n\n1\nAfghanistan\nAFG\n1950\n84272.0\n\n\n2\nAfghanistan\nAFG\n1951\n91600.0\n\n\n3\nAfghanistan\nAFG\n1952\n91600.0\n\n\n4\nAfghanistan\nAFG\n1953\n106256.0\n\n\n...\n...\n...\n...\n...\n\n\n30303\nZimbabwe\nZWE\n2018\n10714598.0\n\n\n30304\nZimbabwe\nZWE\n2019\n9775428.0\n\n\n30305\nZimbabwe\nZWE\n2020\n7849639.0\n\n\n30306\nZimbabwe\nZWE\n2021\n8396158.0\n\n\n30307\nZimbabwe\nZWE\n2022\n8855981.0\n\n\n\n\n30308 rows × 4 columns\n\n\n\n\n\ncolors = sns.color_palette(\"rocket\", n_colors=10).as_hex()\n\nfig = px.choropleth(\n    co2_percountry, \n    locations='Code', \n    color=\"Annual CO₂ emissions\",  \n    hover_name='Entity', \n    color_continuous_scale=colors,  \n    labels={\"Annual CO₂ emissions\": 'CO₂&lt;br&gt;[ton]'},\n    range_color=(0, 800_000_000)\n)\n\nfig.update_layout(\n    coloraxis_colorbar=dict(\n        orientation='h',  \n        x=0.5,  \n        y=-0.15,  \n        len=0.9\n    ),\n    margin={\"r\":0,\"t\":50,\"l\":0,\"b\":50}, \n    geo=dict(\n        showframe=False,  \n        showcoastlines=False,  \n        showland=False, \n    )\n)"
  },
  {
    "objectID": "notebooks/emisiones_mundo.html",
    "href": "notebooks/emisiones_mundo.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as px\nfrom itables import show\n\n\n\nf = \"../data/annual-co2-emissions-per-country.csv\"\nco2 = pd.read_csv(f)\nentities = co2.Entity.unique()\nco2\n\n\n\n\n\n\n\n\nEntity\nCode\nYear\nAnnual CO₂ emissions\n\n\n\n\n0\nAfghanistan\nAFG\n1949\n14656.0\n\n\n1\nAfghanistan\nAFG\n1950\n84272.0\n\n\n2\nAfghanistan\nAFG\n1951\n91600.0\n\n\n3\nAfghanistan\nAFG\n1952\n91600.0\n\n\n4\nAfghanistan\nAFG\n1953\n106256.0\n\n\n...\n...\n...\n...\n...\n\n\n30303\nZimbabwe\nZWE\n2018\n10714598.0\n\n\n30304\nZimbabwe\nZWE\n2019\n9775428.0\n\n\n30305\nZimbabwe\nZWE\n2020\n7849639.0\n\n\n30306\nZimbabwe\nZWE\n2021\n8396158.0\n\n\n30307\nZimbabwe\nZWE\n2022\n8855981.0\n\n\n\n\n30308 rows × 4 columns\n\n\n\n\nincomes = [entity for entity in entities if \"income\" in entity]\nco2_income = co2[co2.Entity.isin(incomes)]\nincomes\n\n['High-income countries',\n 'Low-income countries',\n 'Lower-middle-income countries',\n 'Upper-middle-income countries']\n\n\n\n\n# Crear la gráfica de área apilada\nfig = px.area(\n    co2_income, \n    x='Year', \n    y='Annual CO₂ emissions', \n    color='Entity', \n    labels={\n        'Year': 'Año', \n        'Annual CO₂ emissions': 'Emisiones anuales de CO₂',\n        'Entity': ''\n    },\n    # title='Emisiones anuales de CO₂ por grupo de ingresos (1750-2021)'\n)\n\n# Ajustar la gráfica si es necesario\n# fig.update_layout(\n#     xaxis_title='Año',\n    # yaxis_title='Emisiones anuales de CO₂ (toneladas)',\n    # legend_title_text='Grupo de Ingresos',\n    # width=900,\n    # height=600\n# )\n\n# Mostrar la gráfica\nfig.show()\n\n                                                \n\n\n\nimport pandas as pd\nfrom itables import show\n\n# Definir los grupos de países según los ingresos\nincome_groups = {\n    'High-income countries': ['Andorra', 'Australia', 'Austria', 'Bahamas', 'Bahrain', 'Belgium', 'Canada', 'Denmark', 'Finland', 'France', 'Germany', 'Iceland', 'Ireland', 'Israel', 'Italy', 'Japan', 'Kuwait', 'Luxembourg', 'Netherlands', 'New Zealand', 'Norway', 'Qatar', 'Saudi Arabia', 'Singapore', 'South Korea', 'Spain', 'Sweden', 'Switzerland', 'United Arab Emirates', 'United Kingdom', 'United States'],\n    'Upper-middle-income countries': ['Argentina', 'Brazil', 'China', 'Colombia', 'Costa Rica', 'Cuba', 'Dominican Republic', 'Ecuador', 'Iran', 'Mexico', 'Panama', 'Peru', 'Russia', 'South Africa', 'Turkey'],\n    'Lower-middle-income countries': ['Afghanistan', 'Bangladesh', 'India', 'Kenya', 'Myanmar', 'Nigeria', 'Pakistan', 'Philippines', 'Sri Lanka', 'Tanzania', 'Vietnam', 'Zambia'],\n    'Low-income countries': ['Burundi', 'Chad', 'Congo', 'Eritrea', 'Ethiopia', 'Haiti', 'Liberia', 'Madagascar', 'Malawi', 'Mali', 'Mozambique', 'Niger', 'Rwanda', 'Somalia', 'South Sudan', 'Sudan', 'Togo', 'Uganda', 'Zimbabwe']\n}\n\n# Crear una lista vacía para almacenar los datos\ndata = []\n\n# Mapear cada país en el DataFrame co2 a su grupo de ingresos\nfor entity in co2['Entity'].unique():\n    for group, countries in income_groups.items():\n        if entity in countries:\n            # Filtrar el DataFrame por país y sumar las emisiones de CO₂\n            total_co2 = co2[co2['Entity'] == entity]['Annual CO₂ emissions'].sum()\n            data.append([entity, group, total_co2])\n\n# Crear un DataFrame a partir de los datos\ndf_groups = pd.DataFrame(data, columns=['Entity', 'Income Group', 'Total CO₂ Emissions'])\n\n# Mostrar la tabla interactiva con itable\nshow(df_groups)\n\n\n\n    \n      \n      Entity\n      Income Group\n      Total CO₂ Emissions\n    \n  \n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n\n\nLoading ITables v2.1.4 from the init_notebook_mode cell...\n(need help?)"
  },
  {
    "objectID": "notebooks/002_co2_intensity.html",
    "href": "notebooks/002_co2_intensity.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as px\n\n\nf = \"../data/co2-intensity.csv\"\nco2 = pd.read_csv(f)\n\n\npaises_ejemplo = [\"Denmark\",\"Spain\",\"Germany\",\"Mexico\", \"United States\"]\nnombres = {\n    \"Denmark\":\"Dinamarca\",\n    \"Spain\":\"España\",\n    \"Germany\":\"Alemania\",\n    \"Mexico\":\"México\",\n    \"United States\":\"EUA\"\n}\nco2_ejemplo = co2[(co2.Entity.isin(paises_ejemplo) & (co2.Year &gt;= 1970))]\n# co2_ejemplo[\"Entity\"] = co2_ejemplo.Entity.replace(nombres)\nco2_ejemplo.columns\n\nC:\\Users\\gbv\\AppData\\Local\\Temp\\ipykernel_20592\\2720534047.py:14: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\nIndex(['Entity', 'Code', 'Year',\n       'Annual CO₂ emissions per GDP (kg per international-$)'],\n      dtype='object')\n\n\n\n\n# Creación de la gráfica\nfig = px.line(co2_ejemplo, x='Year', y='Annual CO₂ emissions per GDP (kg per international-$)', color='Entity',\n              labels={\n                  'Year': '',\n                 'Annual CO₂ emissions per GDP (kg per international-$)': 'CO₂/$',\n                  'Entity': 'País'\n              }\n             )\n\n# Mostrar la gráfica\nfig.show()\n\n                                                \n\n\n\nco2_ejemplo['cambio_porcentual'] = co2_ejemplo.groupby('Entity')['Annual CO₂ emissions per GDP (kg per international-$)'].pct_change() * 100\n\n\n# Creación de la gráfica\nfig = px.line(co2_ejemplo, x='Year', y='cambio_porcentual', color='Entity',\n              labels={\n                  'Year': '',\n                 'cambio_porcentual': 'Cambio %',\n                  'Entity': 'País'\n              }\n             )\n\n# Mostrar la gráfica\nfig.show()\n\nC:\\Users\\gbv\\AppData\\Local\\Temp\\ipykernel_20592\\929015394.py:1: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n                                                \n\n\n\nco2_ejemplo\n\n\n\n\n\n\n\n\nEntity\nCode\nYear\nAnnual CO₂ emissions per GDP (kg per international-$)\ncambio_porcentual\n\n\n\n\n4040\nDinamarca\nDNK\n1970\n0.622482\nNaN\n\n\n4041\nDinamarca\nDNK\n1971\n0.557057\n-10.510451\n\n\n4042\nDinamarca\nDNK\n1972\n0.553091\n-0.711947\n\n\n4043\nDinamarca\nDNK\n1973\n0.530288\n-4.122688\n\n\n4044\nDinamarca\nDNK\n1974\n0.497428\n-6.196783\n\n\n...\n...\n...\n...\n...\n...\n\n\n16306\nEUA\nUSA\n2018\n0.296711\n0.225826\n\n\n16307\nEUA\nUSA\n2019\n0.283818\n-4.345284\n\n\n16308\nEUA\nUSA\n2020\n0.261526\n-7.854290\n\n\n16309\nEUA\nUSA\n2021\n0.263475\n0.745233\n\n\n16310\nEUA\nUSA\n2022\n0.259440\n-1.531632\n\n\n\n\n265 rows × 5 columns"
  },
  {
    "objectID": "notebooks/emisiones_por_pais.html",
    "href": "notebooks/emisiones_por_pais.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as px\nimport colormaps as cmaps\nimport seaborn as sns\nfrom itables import show\nimport numpy as np\n\n\n\ndef filtra_maxyear(co2):\n    return co2[co2.Year == co2.Year.max()]\n\n\nf = \"../data/co-emissions-per-capita.csv\"\nco2_percapita = pd.read_csv(f)\nco2_percapita = filtra_maxyear(co2_percapita)\n\nf = \"../data/co2-intensity.csv\"\nco2_intensity = pd.read_csv(f)\nco2_intensity = filtra_maxyear(co2_intensity)\n\nf = \"../data/annual-co2-emissions-per-country.csv\"\nco2_percountry = pd.read_csv(f)\nco2_percountry = filtra_maxyear(co2_percountry)\n\n\n# Combinar los tres DataFrames por 'Entity', 'Code', y 'Year'\nco2_combined = co2_percapita[['Entity', 'Code', 'Year', 'Annual CO₂ emissions (per capita)']].merge(\n    co2_intensity[['Entity', 'Code', 'Year', 'Annual CO₂ emissions per GDP (kg per international-$)']], \n    on=['Entity', 'Code', 'Year'], how='outer'\n).merge(\n    co2_percountry[['Entity', 'Code', 'Year', 'Annual CO₂ emissions']], \n    on=['Entity', 'Code', 'Year'], how='outer'\n)\n\nco2_combined\n\n\n\n\n\n\n\n\nEntity\nCode\nYear\nAnnual CO₂ emissions (per capita)\nAnnual CO₂ emissions per GDP (kg per international-$)\nAnnual CO₂ emissions\n\n\n\n\n0\nAfghanistan\nAFG\n2022\n0.295364\n0.227902\n1.214795e+07\n\n\n1\nAfrica\nNaN\n2022\n0.994221\n0.217475\n1.416627e+09\n\n\n2\nAfrica (GCP)\nNaN\n2022\nNaN\nNaN\n1.416609e+09\n\n\n3\nAlbania\nALB\n2022\n1.743200\n0.136981\n4.954730e+06\n\n\n4\nAlgeria\nDZA\n2022\n3.927226\n0.295970\n1.763451e+08\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n238\nWallis and Futuna\nWLF\n2022\n2.281908\nNaN\n2.646100e+04\n\n\n239\nWorld\nOWID_WRL\n2022\n4.658219\n0.285520\n3.714979e+10\n\n\n240\nYemen\nYEM\n2022\n0.337017\n0.186619\n1.135635e+07\n\n\n241\nZambia\nZMB\n2022\n0.445701\n0.130304\n8.921889e+06\n\n\n242\nZimbabwe\nZWE\n2022\n0.542628\n0.341909\n8.855981e+06\n\n\n\n\n243 rows × 6 columns\n\n\n\n\nco2_percapita.columns, co2_percountry.columns, co2_intensity.columns\n\n(Index(['Entity', 'Code', 'Year', 'Annual CO₂ emissions (per capita)'], dtype='object'),\n Index(['Entity', 'Code', 'Year', 'Annual CO₂ emissions'], dtype='object'),\n Index(['Entity', 'Code', 'Year',\n        'Annual CO₂ emissions per GDP (kg per international-$)'],\n       dtype='object'))\n\n\n\npaises = co2_percountry.Code.unique()\npaises = [pais for pais in paises if not pd.isna(pais)]\ncode, co2_max = co2_percountry[co2_percountry.Code.isin(paises)][['Code','Annual CO₂ emissions']].max()\nco2_max\n\nnp.float64(37149786000.0)\n\n\n\n\n# Crear el mapa coroplético\nfig = px.choropleth(filtra_maxyear(co2_percapita), \n                    locations='Code', \n                    color='Annual CO₂ emissions (per capita)', \n                    hover_name='Entity', \n                    color_continuous_scale=px.colors.sequential.Jet,\n                    labels={'Annual CO₂ emissions (per capita)': 'Emisiones de CO₂ per cápita (toneladas)'},\n                    title='Emisiones de CO₂ per cápita por país en 2022'\n                   )\n\nfig.update_layout(\n    width=1000,  # Ancho de la figura\n    height=600,  # Alto de la figura\n)\n\n# Mostrar la gráfica\nfig.show()\n\n\n\n# Filtrar y cargar los datos\ndf = filtra_maxyear(co2_percapita)\n\n# Discretizar los datos en 10 intervalos\ndf['CO₂ discretized'] = pd.cut(df['Annual CO₂ emissions (per capita)'], bins=10, labels=False)\n\n# Obtener una paleta de colores discreta de seaborn con 10 colores\ncolors = sns.color_palette(\"rocket\", n_colors=10).as_hex()\n\n# Crear el mapa coroplético\nfig = px.choropleth(\n    df, \n    locations='Code', \n    color='CO₂ discretized',  # Usar los datos discretizados\n    hover_name='Entity', \n    color_continuous_scale=colors,  # Aplicar la paleta de colores discretos\n    labels={'CO₂ discretized': 'CO₂&lt;br&gt;[ton]'},\n)\n\n# Ajustar la posición y orientación de la barra de color\nfig.update_layout(\n    width=1000,  # Ancho de la figura\n    height=600,  # Alto de la figura\n    coloraxis_colorbar=dict(\n        orientation='h',  # Orientar la barra de color en horizontal\n        x=0.5,  # Centrar la barra de color en el eje X\n        y=-0.15,  # Colocar la barra de color por debajo del mapa\n    ),\n    margin={\"r\":0,\"t\":50,\"l\":0,\"b\":50},  # Ajustar márgenes para dar espacio a la barra de color\n    geo=dict(\n        showframe=False,  # Quitar el borde del mapa\n        showcoastlines=False,  # Quitar las líneas de costa\n        showland=False,  # Quitar la representación de tierra\n    )\n)\n\n# Mostrar la gráfica\nfig.show()\n\n\nco2_percapita\n\n\nco2_percapita.sort_values(by=\"Annual CO₂ emissions (per capita)\",inplace=True)\nco2_percapita.rename(columns={\"Annual CO₂ emissions (per capita)\":\"CO₂\"},inplace=True)\nshow(co2_percapita[[\"Entity\",\"CO₂\"]],showIndex=False)"
  }
]