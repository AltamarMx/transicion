---
title: "Quién es quién en<br>$CO_2$ en el mundo"
autor: G. Barrios
format: dashboard
logo: img/ods-07.png
---
```{python}
import pandas as pd
import plotly.express as px
import seaborn as sns



def filtra_maxyear(co2):
    return co2[co2.Year == co2.Year.max()]

f = "data/co-emissions-per-capita.csv"
co2_percapita = pd.read_csv(f)
co2_percapita = filtra_maxyear(co2_percapita)


f = 'data/annual-co2-emissions-per-country.csv'
co2_percountry = pd.read_csv(f)
entities = co2_percountry.Entity.unique()
grupos = [entity for entity in entities if 'income' in entity]

co2_income = co2_percountry[co2_percountry.Entity.isin(grupos)].copy()

traduccion = {
    'High-income countries': 'Ingresos altos',
    'Low-income countries': 'Ingresos bajos',
    'Lower-middle-income countries': 'Ingresos medios-bajos',
    'Upper-middle-income countries': 'Ingresos medios-altos'
}
co2_income['Entity'] = co2_income['Entity'].replace(traduccion)
co2_income['Tton CO₂'] = co2_income['Annual CO₂ emissions']/1e9

```

# CO₂ en el mundo  por nivel de ingreso


## Row {height="30%"}



```{python} 
#| content: valuebox
#| title: Emisiones anuales en Giga toneladas de CO₂ para paises de ingresos medios-altos en el 2022
#| color: purple
#| icon: cloud-haze
mask_year = co2_income.Year == co2_income.Year.max()
mask_income = co2_income.Entity == 'Ingresos medios-altos'
co2 = co2_income[mask_year & mask_income ][['Tton CO₂']].values[0][0]*1000
formatted_co2 = '{:,.1f}'.format(co2)

dict(value =  formatted_co2)
```

```{python} 
#| content: valuebox
#| title: Emisiones anuales en Giga toneladas de CO₂ para paises de ingresos altos durante el 2022
#| color: blue
#| icon: cloud-haze

mask_year = co2_income.Year == co2_income.Year.max()
mask_income = co2_income.Entity == 'Ingresos altos'
co2 = co2_income[mask_year & mask_income ][['Tton CO₂']].values[0][0] * 1000
formatted_co2 = '{:,.1f}'.format(co2)

dict(value =  formatted_co2)
```


```{python} 
#| content: valuebox
#| title: Emisiones anuales en Giga toneladas de CO₂ para paises de ingresos medios-bajos en el 2022
#| color: green
#| icon: cloud-haze

mask_year = co2_income.Year == co2_income.Year.max()
mask_income = co2_income.Entity == 'Ingresos medios-bajos'
co2 = co2_income[mask_year & mask_income ][['Tton CO₂']].values[0][0]*1000
formatted_co2 = '{:,.1f}'.format(co2)

dict(value =  formatted_co2)
```

```{python} 
#| content: valuebox
#| title: Emisiones anuales en Giga toneladas de CO₂ para paises de ingresos bajos durante el 2022
#| color: red
#| icon: cloud-haze
mask_year = co2_income.Year == co2_income.Year.max()
mask_income = co2_income.Entity == 'Ingresos bajos'
co2 = co2_income[mask_year & mask_income ][['Tton CO₂']].values[0][0] * 1000
formatted_co2 = '{:,.1f}'.format(co2)

dict(value =  formatted_co2)
```


## Row

```{python}
fig = px.area(
    co2_income, 
    x='Year', 
    y='Tton CO₂', 
    color='Entity', 
    range_x= (1900,2022),
    labels={
        'Year': 'Año', 
        'Entity': ''
    },

)

fig.update_layout(legend=dict(
    yanchor="top",
    y=0.99,
    xanchor="left",
    x=0.01
))
```





# Top 15 en CO₂ anual


## Row

### Top 15 en CO₂ {width=75%}

```{python}

co2_ordered  = co2_percountry[co2_percountry.Year == 2022][["Code","Year","Annual CO₂ emissions","Entity"]].sort_values(by="Annual CO₂ emissions",ascending=False)

co2_filtered = co2_ordered[co2_ordered['Code'].notnull()]
co2_filtered = co2_ordered[co2_ordered['Code'].apply(lambda x: isinstance(x, str) and len(x) == 3 and x.isalpha())]

top15co2 = co2_filtered.head(15)
top15co2.reset_index(inplace=True)
top15co2["Lugar"] = top15co2.index + 1

colors = sns.color_palette("rocket", n_colors=10).as_hex()

fig = px.choropleth(
    top15co2, 
    locations='Code', 
    color="Annual CO₂ emissions",  
    hover_name='Entity', 
    hover_data="Lugar",
    color_continuous_scale=colors,  
    labels={"Annual CO₂ emissions": 'CO₂ <br>[ton]'},
    range_color=(7e3, 1.1e10)
)

fig.update_layout(
    coloraxis_colorbar=dict(
        orientation='h',  
        x=0.5,  
        y=-0.15,  
        len=0.9
    ),
    margin={"r":0,"t":50,"l":0,"b":50}, 
    geo=dict(
        showframe=False,  
        showcoastlines=False,  
        showland=True, 
    )
)


```

### Top 15 paises

```{python}
from great_tables import GT, md, html

nuevos_nombres = {
    'Annual CO₂ emissions': 'CO₂ anual',
    'Entity':'País',
    "Lugar":"#"
}

top15co2 = top15co2.rename(columns=nuevos_nombres)

gt_tbl = GT(top15co2[["#","País","CO₂ anual"]])
gt_tbl

```




# Top 15 en CO₂ per cápita
<!-- El **CO₂ per cápita**  es una medida que representa la cantidad promedio de dióxido de carbono (CO₂) emitido por cada persona en un país o región en un período específico, generalmente expresado en toneladas por año. Es un indicador que refleja el impacto ambiental en relación con la población.

Aqui van unas cards que calculan cuanto se emite en el país que emite más per capita, menos y México como referencia, especificando por habitante -->





## Row

###  {width=75%}

```{python}

co2_ordered  = co2_percapita[["Code","Year","Annual CO₂ emissions (per capita)","Entity"]].sort_values(by="Annual CO₂ emissions (per capita)",ascending=False)

co2_filtered = co2_ordered[co2_ordered['Code'].notnull()]
co2_filtered = co2_ordered[co2_ordered['Code'].apply(lambda x: isinstance(x, str) and len(x) == 3 and x.isalpha())]

top15co2 = co2_filtered.head(15)
top15co2.reset_index(inplace=True)
top15co2["Lugar"] = top15co2.index + 1

colors = sns.color_palette("rocket", n_colors=10).as_hex()

fig = px.choropleth(
    top15co2, 
    locations='Code', 
    color="Annual CO₂ emissions (per capita)",  
    hover_name='Entity', 
    hover_data="Lugar",
    color_continuous_scale=colors,  
    labels={"Annual CO₂ emissions (per capita)": 'CO₂ per cápita <br>[ton]'},
    range_color=(12, 37)
)

fig.update_layout(
    coloraxis_colorbar=dict(
        orientation='h',  
        x=0.5,  
        y=-0.15,  
        len=0.9
    ),
    margin={"r":0,"t":50,"l":0,"b":50}, 
    geo=dict(
        showframe=False,  
        showcoastlines=False,  
        showland=True, 
    )
)


```

### Top 15 paises

```{python}
from great_tables import GT, md, html
nuevos_nombres = {
    'Annual CO₂ emissions (per capita)': 'CO₂ per cápita',
    'Entity':'País',
    "Lugar":"#"
}

top15co2 = top15co2.rename(columns=nuevos_nombres)

gt_tbl = GT(top15co2[["#","País","CO₂ per cápita"]]).fmt_number(columns=["CO₂ per cápita"], decimals=2)

gt_tbl

```
